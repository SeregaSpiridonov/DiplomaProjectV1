---
# tasks file for postgresqlm

- name: Установка необходимых пакетов
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - "{{ packages_to_install }}" #Цикл будет перебирать все значения из переменной "packages"

- name: Установка необходимого модуля python psycopg2
  ansible.builtin.pip:
    name: psycopg2

- name: Установка Postgresql(Master)
  apt:
    name: "postgresql"
    state: present
    update_cache: true

- name: Ожидание инициализации Postgresql
  ansible.builtin.wait_for:
    path: /etc/postgresql/14/main/pg_hba.conf # ожидает создания файла

- name: Настройка 1 Postgresql
  ansible.builtin.template:
    src: pg_hba.conf
    dest: /etc/postgresql/14/main/pg_hba.conf

- name: Копирование файла pgpass
  ansible.builtin.copy:
    src: pasfile/.pgpass
    dest: /var/lib/postgresql/.pgpass
    owner: postgres # владелец
    group: postgres # группа
    mode: '0600'

- name: Настройка 2 Postgresql
  ansible.builtin.template:
    src: postgresql.conf
    dest: /etc/postgresql/14/main/postgresql.conf
  notify: "Postgres restart"

- name: Ожидание запуска Postgresql после перезагрузки
  ansible.builtin.wait_for:
    host: 0.0.0.0 # любой ip
    port: 5432    # номер порта
    delay: 5     # через 10сек

- name: Create a user for wiki
  community.postgresql.postgresql_user:
    name: wikiuser # имя пользователя(роли)
    password: "qaz54321+=hgfwikiuser"
  become_user: postgres
  when: instal_db == "clear"

- name: Create a user for replica
  community.postgresql.postgresql_user:
    name: syncuser
    password: "qaz54321+=hG9syncuser"
    role_attr_flags: REPLICATION,NOSUPERUSER # флаги при создании пользователя(роли)
  become_user: postgres
  when: instal_db == "clear"

- name: Create a new database for wiki {{ name_db_mediawiki }}
  community.postgresql.postgresql_db:
    name: "{{ name_db_mediawiki }}"   # название БД
    owner: wikiuser                   # пользователь БД
  become_user: postgres
  when: instal_db == "clear"

- name: Остановка службы Postgresql
  service:
    name: "postgresql"
    state: stopped
  when: instal_db == "backup"

- name: Копирование резервной копии БД
  copy:
    src: backup/base_for_wiki_clear.tar.gz
    dest: /tmp     # куда
    remote_src: no # копирование из папки где запускается ansible
  when: instal_db == "backup"

- name: Подготовка к востановлению БД
  ansible.builtin.file:
    path: /var/lib/postgresql/14/main/*
    state: absent
  when: instal_db == "backup"

- name: Распаковка БД
  ansible.builtin.unarchive:
    src: /tmp/base_for_wiki_clear.tar.gz
    dest: /var/lib/postgresql/14/main/
    remote_src: true
  when: instal_db == "backup"

- name: Удаление архива резервной копии БД
  ansible.builtin.file:
    state: absent
    path: /tmp/base_for_wiki_clear.tar.gz
  when: instal_db == "backup"

- name: Запуск службы Postgresql
  service:
    name: "postgresql"
    state: started
  when: instal_db == "backup"

- name: Копирование скрипта дампа БД
  ansible.builtin.template:
    src: dumpdb_mediawiki.sh.j2
    dest: /var/lib/postgresql/dumpdb_mediawiki.sh
    owner: postgres
    group: postgres
    mode: '0700'

- name: Копирование скрипта востановления БД
  ansible.builtin.template:
    src: restoredb_mediawiki.sh.j2
    dest: /var/lib/postgresql/restoredb_mediawiki.sh
    owner: postgres
    group: "{{ sudo_user_name }}"
    mode: '0770'

- name: Создаём директорию для дампов БД
  ansible.builtin.file:
    path: /var/backups/db-backup
    state: directory
    owner: postgres
    group: "{{ sudo_user_name }}"
    mode: '0760'

- name: Создание задания cron (дамп бд) # каждый день в 04-00
  ansible.builtin.cron:
    name: backup_db_mediawiki
    minute: "0"
    hour: "4"
    day: "*"
    month: "*"
    weekday: "*"
    user: postgres
    job: "/var/lib/postgresql/dumpdb_mediawiki.sh"

- name: Создаём директорию .ssh пользователя postgres
  ansible.builtin.file:
    path: /var/lib/postgresql/.ssh
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Добавляем публичный ключ для работы failover
  ansible.builtin.lineinfile:
    path: /var/lib/postgresql/.ssh/authorized_keys # в какой файл
    line: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMkxoXpokYG318CkfYy3CbagT0/2m1dyFZEhcN+30RafxHM57BNSgLgBeCBo1ePjrUrixMBSu+OfPprlY3o8O+o= postgres@vm
    create: yes # создаст если нет

- name: Копирование приватного ключа ssh
  copy:
    src: key/id_ed25519
    dest: /var/lib/postgresql/.ssh # куда
    remote_src: no
    mode: '0600' # права
    owner: postgres
    group: postgres
